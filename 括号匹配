typedef struct Stack
{
    char* List;
    int top;
    int capacity;
}Stack;

// 初始化栈
void StackInit(Stack* ps)
{
    ps->List = (char*)malloc(8*sizeof(char));
    ps->top=0;
    ps->capacity=8;
}
Stack* OpenCapacity(Stack* ps)//增容程序
{
	ps->List = (char*)realloc(ps->List, 2 * ps->capacity*sizeof(char));
	ps->capacity = ps->capacity * 2;
	return ps;
}
// 入栈
void StackPush(Stack* ps, char data)
{
    if(ps->top == ps->capacity)
    {
        ps = OpenCapacity(ps);
    }
    else if(ps->top>=0 )
    {
        ps->List[ps->top-1]=data;
    }
    else
    {
        return;
    }
    
}
// 出栈
void StackPop(Stack* ps)
{
    if(ps->top>0 && ps->top <= 8)
    {
        ps->top--;
    }
}
void StackDestroy(Stack* ps)// 销毁栈
{
	if (ps == NULL || ps->List == NULL)
	{
		return;
	}
	else
	{
		free(ps->List);
		ps->List = NULL;
		ps->top = 0;
	}
}
char StackTop(Stack* ps)// 获取栈顶元素
{
	if (ps->top == 0)
	{
		printf("栈为空\n");
	}

	return  ps->List[ps->top - 1];

}
bool isValid(char * s)
{
    Stack p;
    StackInit(&p);
    while(*s)
    {
        if(*s=='{' || *s=='(' || *s == '[')
        {
            StackPush(&p,*s);
        }
        else if(*s=='}')
        {
            if(p.top==0)
            {
                return false;
            }
           char top = StackTop(&p);
            StackPop(&p);
            if(top!='{')
            {
                return false;
            }
        }
        else if(*s==')')
        {
            if(p.top==0)
            {
                return false;
            }
           char top = StackTop(&p);
            StackPop(&p);
            if(top!='(')
            {
                return false;
            }
        }
        else if(*s==']')
        {
            if(p.top==0)
            {
                return false;
            }
           char top = StackTop(&p);
            StackPop(&p);
            if(top!='[')
            {
                return false;
            }
        }

        ++s;
    }
    if(p.top>0)
    {
        return false;
    }
    
   StackDestroy(&p); 
   return true;
}

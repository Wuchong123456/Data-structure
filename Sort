#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include "stack.h"

void Swap(int* a, int* b)
{
	int tmp = 0;
	tmp = *a;
	*a = *b;
	*b = tmp;
}
void BubbleSort(int* a, int n)//冒泡排序
{
	int i = 0;
	int j = 0;
	for (i=0; i < (n - 1); i++)
	{
		int flag = 0;
		for (j = 0; j< n-i-1; j++)
		{
			if (a[j] > a[j+1])
			{
				Swap(&a[j], &a[j + 1]);

			}
		
		}
		if (flag = 0)
		{
			break;
		}

	}

}
int GetMidIndex(int* a, int begin, int end)//三数取中
{
	int mid = (begin + end) >> 1;//begin mid end
	if (a[begin] < a[mid])
	{
		if (a[mid] < a[end])
			return end;
		else if (a[begin] < a[end])//a[mid]>a[end]
			return end;
		else
			return begin;
	}
	else//a[begin]>a[mid]
	{
		if (a[mid]>a[end])
			return mid;
		else if (a[begin] < a[mid])
			return begin;
		else
			return mid;
	}
	 
}
int PartSort1(int* a, int begin, int end)//原版方法
{
	int key = a[end];
	int cur = end;
	while (begin < end)
	{
		while (begin < end && a[begin]<= key)
		{
			begin++;
		}
		while (begin < end && a[end]>=key)
		{
			end--;
		}
		Swap(&a[begin], &a[end]);
	}
	Swap(&a[begin], &a[cur]);
	return begin;
}
int PartSort2(int* a, int begin, int end)//挖坑法
{
	int key = a[end];//挖个坑
	
	while (begin < end)
	{
		while (begin < end && a[begin] <= key)//找大
		{
			begin++;
		}
		Swap(&a[begin], &a[end]);//交换，制造新坑
		while (begin < end && a[end] >= key)//找小
		{
			end--;
		}
		Swap(&a[begin], &a[end]);

	}
	a[begin] = key;//重合时填坑
	return begin;
}
int PartSort3(int* a, int begin, int end)//前后指针法
{
	int midindex = GetMidIndex(a, begin, end);//三数取中
	Swap(&a[midindex], &a[end]); 
	int key = a[end];
	int cur = begin;
	int prev = begin;
	while (cur <end)
	{
		if (a[cur] < key)
		{
			
			Swap(&a[cur], &a[prev]);
			prev++;
			
		}
		cur++;
		
	}
	
	Swap(&a[prev], &a[end]);
	return prev;
}
void QuickSort(int* a, int begin, int end)//基础快速排序
{
	if (begin >= end)
	{
		return;
	}
	int keyindex = PartSort3(a, begin, end);
	QuickSort(a, begin, keyindex - 1);
	QuickSort(a, keyindex + 1, end);

}
void QuickSortNonR(int*a, int begin, int end)//用栈模拟递归的快速排序
{
	Stack st;//创建栈
	StackInit(&st);//初始化
	StackPush(&st, begin);//入栈
	StackPush(&st, end);//入栈
	while (StackEmpty(&st))
	{
		int right = StackTop(&st);
		StackPop(&st);
		int left = StackTop(&st);
		StackPop(&st);
		int keyindex = PartSort3(a, left, right);//[left,keyindex-1],[keyindex+1,right]
		if (left < keyindex)//什么时候不用往里放
		{
			StackPush(&st, left);//入栈
			StackPush(&st, keyindex - 1);//入栈

		}
		if (keyindex+1 < right)
		{
			StackPush(&st, keyindex + 1);
			StackPush(&st, right);
		}
	
	}	
	StackDestroy(&st);
}
void ShellSort(int* a, int n)//希尔排序
{
	int i = 0;
	int gap = n;
	while(gap > 1)
	{
		gap = gap / 3 + 1;//gap=1就是插入排序
		for (i = 0; i < n - gap; i++)//每组数据是同时排序的
		{
			int end = i;
			int tmp = a[end + gap];
			while (end >= 0)
			{
				if (tmp < a[end])
				{
					a[end + gap] = a[end];
					end -= gap;
				}
				else
				{
					break;
				}
			}
			a[end + gap ] = tmp;

		}

	}
}
void SelectSort(int* a, int n)//选择排序，max==begin会出错
{
	int begin = 0, end = n - 1;
	
	while (begin < end)
	{
		int min = end, max = begin;
		for (int i = begin; i <= end; i++)
		{
			if (a[i]>a[max])
			{
				max = i;
			}
			if (a[i] < a[min])
			{
				min = i;
			}
		}
		Swap(&a[begin], &a[min]);
		if (begin==max)//修正max==begin的错误
		{
			max = min;
		}
		Swap(&a[end], &a[max]);
		begin++;
		end--;
	}

}
void AdjustDown(int* a, int n, int root)//向下调整算法
{
	int parent = root;
	int child = parent * 2 + 1;
	while (child<n)
	{
		if (child +1 > n)
		{
			break;
		}
		if (child + 1 < n && a[child] < a[child+1])
		{
			child = child + 1;
		}
		if (a[child]>a[parent])
		{
			Swap(&a[child], &a[parent]);
			parent = child;
			child = child * 2 + 1;
		}
		else
		{
			break;
		}
		
		
	}


}
void HeapSort(int* a, int n)//堆排序
{
	int i = 0;
	
	for (i=(n-2)/2; i >=0; i--)//只排父亲节点
	{
		AdjustDown(a, n, i);
	}
	for (i = n - 1; i > 0; i--)//排序
	{
		Swap(&a[0], &a[i]);
		AdjustDown(a, i, 0);

	}
}
void  _MergeSort(int* a, int begin, int end, int* tmp)//归并排序
{
	int mid = (begin + end) >> 1;
	if (begin < mid)
	{
		_MergeSort(a, begin, mid, tmp);
	}
	if (mid + 1 < end)
	{
		_MergeSort(a, mid + 1, end, tmp);
	}
	int begin1 = begin;
	int begin2 = mid + 1;
	int end1 = mid;
	int end2 = end;
	int i = begin;
	while (begin1 <= end1 && begin2 <= end2)
	{
		if (a[begin1] < a[begin2])
		{
			tmp[i] = a[begin1];
			i++;
			begin1++;
			
		}
		else
		{
			tmp[i] = a[begin2];
			i++;
			begin2++;
		}		
	}
	if (begin1 <= end1)
	{
		while (begin1 <= end1)
		{
			tmp[i] = a[begin1];
			i++;
			begin1++;
		}
		
	}
	if (begin2 <= end2)
	{
		while (begin2 <= end2)
		{
			tmp[i] = a[begin2];
			i++;
			begin2++;
		}
	}
	memcpy(a + begin, tmp + begin, sizeof(int)*(end - begin + 1));


}
void MergeSort(int* a, int n)//归并排序
{
	int* tmp = malloc(sizeof(int)*n);
	_MergeSort(a, 0, n, tmp);
	
	free(tmp);
}
int main()
{
	int a[10] = { 9, 2, 3, 4, 7, 8, 1,6,5,0};
	int n = sizeof(a) / sizeof(int);
    //BubbleSort(a, n);
	int begin = 0;
	int end = n-1;
	//QuickSort(a, begin, end);
	//InsertSort(a, n);
	//ShellSort(a, n);
	//SelectSort(a, n);
	//HeapSort(a, n);
	//QuickSortNonR(a, begin, end);
	MergeSort(a, n);
	for (int i = 0; i < n; i++)
	{
		printf("%d ", a[i]);
	}
	return 0;
}
